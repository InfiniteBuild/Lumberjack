# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  NugetExe: $CI_PROJECT_DIR\buildtools\nuget\nuget.exe
  publishDir: $CI_PROJECT_DIR\Publish
  pubRelDir: $CI_PROJECT_DIR\Publish\Release
  pubDebDir: $CI_PROJECT_DIR\Publish\Debug
  pubNugetDir: $CI_PROJECT_DIR\Publish\Nuget
  # CI_BUILD_VERSION: 1.0.0

stages:          # List of stages for jobs, and their order of execution
  - versioning
  - configure
  - build
  - package
  - deploy
  - release

before_script:
  - '& $CI_PROJECT_DIR\CM\scripts\setup.ps1'

generate_version:
  stage: versioning
  script:
    - '& $CI_PROJECT_DIR\CM\scripts\generate_version.ps1'
    - '& $CI_PROJECT_DIR\CM\scripts\update_assembly_version.ps1'
  artifacts:
    paths:
      - version.txt
      - CM/Version/assemblyversion.props

configure_group_repo:
  stage: configure
  rules:
    - if: '$GroupRepo && $GroupRepoUser && $GroupRepoPW'
  script:
    - |
      # 1. Capture the list of NuGet sources (forcing English output for reliable string matching)
      $SourceList = (& $NugetExe sources list -Format Detailed -ForceEnglishOutput | Out-String)
      
      # 2. Define the source name to check
      $SourceName = "PackageStore"
      
      # 3. Check if the source name exists in the output string
      if ($SourceList -like "*$SourceName*") {
          Write-Host "NuGet source '$SourceName' found. Updating source."
          # If found, call Update
          & $NugetExe sources Update -Name $SourceName -Source $GroupRepo -Username $GroupRepoUser -Password $GroupRepoPW
      }
      else {
          Write-Host "NuGet source '$SourceName' not found. Adding new source."
          # If not found, call Add
          & $NugetExe sources Add -Name $SourceName -Source $GroupRepo -Username $GroupRepoUser -Password $GroupRepoPW
      }
  
build-job:       # This job runs in the build stage, which runs first.
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  script:
    - echo "Compiling the code..."
    - '& $CI_PROJECT_DIR\CM\PublishProjects.bat'
    - echo "Compile complete."

build-Release-job:       # This job runs in the build stage, which runs first.
  stage: build
  rules:
    - if: $CI_COMMIT_TAG 
  script:
    - echo "Compiling the code..."
    - '& $CI_PROJECT_DIR\CM\GenerateRelease.bat'
    - echo "Compile complete."
  artifacts:
    paths:
      - $publishDir/zip/ # Collects all files in this directory
    expire_in: 1 week
  
nuget-dev-packages:
  stage: package
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  script:
    - echo "Creating Dev Packages"
    - $CI_BUILD_VERSION = Get-Content $CI_PROJECT_DIR\version.txt
    - $CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()
    - echo "CI_BUILD_VERSION $CI_BUILD_VERSION"
    - echo "pubNugetDir $pubNugetDir"
    - echo "pubRelDir $pubRelDir"
    - New-Item -ItemType Directory -Force -Path $pubNugetDir
    - '& $CI_PROJECT_DIR\cm\Nuget\GeneratePackage.bat $CI_BUILD_VERSION-$CI_COMMIT_BRANCH $pubRelDir $pubNugetDir\lumberjack.nuspec'
    - '& $NugetExe pack $pubNugetDir\lumberjack.nuspec -OutputDirectory $pubNugetDir'

nuget-release-packages:
  stage: package
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "Creating Release Packages"
    - $CI_BUILD_VERSION = Get-Content $CI_PROJECT_DIR\version.txt
    - $CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()
    - echo "CI_BUILD_VERSION $CI_BUILD_VERSION"
    - echo "pubNugetDir $pubNugetDir"
    - echo "pubRelDir $pubRelDir"
    - New-Item -ItemType Directory -Force -Path $pubNugetDir
    - '& $CI_PROJECT_DIR\cm\Nuget\GeneratePackage.bat $CI_BUILD_VERSION $pubRelDir $pubNugetDir\lumberjack.nuspec'
    - '& $NugetExe pack $pubNugetDir\lumberjack.nuspec -OutputDirectory $pubNugetDir'

deploy-package:      # This job runs in the deploy stage.
  stage: deploy 
  variables:
    GIT_STRATEGY: none
  rules:
    - if: '$UploadRepo && $UploadRepoToken'
  script:
    - echo "Deploying to Package Store..."
    - '& $NugetExe push $pubNugetDir\*.nupkg -Source $UploadRepo -ApiKey $UploadRepoToken'
    - echo "Application successfully deployed."

deploy-droplocation:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  rules:
    - if: '$DropLocationRoot'
  script:
    - '$CI_BUILD_VERSION = Get-Content "$CI_PROJECT_DIR\version.txt"'
    - '$CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()'
    - 'echo "CI_BUILD_VERSION $CI_BUILD_VERSION"'
    - '$FinalDropLocation = "{0}\{1}\{2}\{3}_{4}" -f $DropLocationRoot, $CI_PROJECT_NAME, $CI_COMMIT_BRANCH, $CI_PIPELINE_ID, $CI_BUILD_VERSION'
    - 'echo "Publish Directory $publishDir"'
    - 'echo "Deploying to $FinalDropLocation"'
    - 'robocopy /e /s "$publishDir" "$FinalDropLocation"; if ($lastexitcode -le 2) { $global:LASTEXITCODE = $null }'

release_job:
  stage: release
  needs:
    - job: build-Release-job # Ensures the release job runs after a successful build
      artifacts: true # Makes the build job's artifacts available to this job
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG # This rule ensures the job only runs when a tag is created/pushed
  script:
    - Write-Host "Starting release creation via GitLab CLI (glab)..."
    - $glabExe = "$env:CI_PROJECT_DIR\buildtools\glab\glab.exe"
    
    # 5. Use GLAB to create the release
    # Note: GLAB automatically finds the CI_JOB_TOKEN and API URL from environment variables.
    - Write-Host "Creating GitLab Release..."
    
    # Example: Define release description content (use markdown)
    - $releaseDescription = "## Release $env:CI_COMMIT_TAG`n`nAutomated final release build."
    
    # Command to create the release (This replaces the 'release:' keyword)
    # The --assets flag is used to include your build artifacts
    # Replace the artifact path with your actual path!
    # $CI_PROJECT_DIR is provided by GitLab
    - $artifactPath = "$env:CI_PROJECT_DIR/$publishDir/zip/" 
    
    - $releaseCommand = "$glabExe release create $env:CI_COMMIT_TAG `
        --name 'Official Release $env:CI_COMMIT_TAG' `
        --notes '$releaseDescription' `
        # --notes-file 'release_notes.md' `
        --assets-links '[{"name": "Lumberjack","url": "$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/publish/zip/Lumberjack_$CI_BUILD_VERSION.zip","link_type":"package" }]'
    - Write-Host "Release Command: $releaseCommand"
    - Invoke-Expression $releaseCommand
    
