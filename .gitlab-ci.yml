# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  NugetExe: $CI_PROJECT_DIR\buildtools\nuget\nuget.exe
  publishDir: $CI_PROJECT_DIR\Publish
  pubRelDir: $CI_PROJECT_DIR\Publish\Release
  pubDebDir: $CI_PROJECT_DIR\Publish\Debug
  pubNugetDir: $CI_PROJECT_DIR\Publish\Nuget
  # CI_BUILD_VERSION: 1.0.0

stages:          # List of stages for jobs, and their order of execution
  - versioning
  - build
  - package
  - deploy

before_script:
  - '& $CI_PROJECT_DIR\CM\scripts\setup.ps1'

generate_version:
  stage: versioning
  script:
    - '& $CI_PROJECT_DIR\CM\scripts\generate_version.ps1'
    - '& $CI_PROJECT_DIR\CM\scripts\update_assembly_version.ps1'
  artifacts:
    paths:
      - version.txt
      - CM/Version/assemblyversion.props

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - '& $CI_PROJECT_DIR\CM\PublishProjects.bat'
    - echo "Compile complete."
  
nuget-dev-packages:
  stage: package
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  script:
    - echo "Creating Dev Packages"
    - $CI_BUILD_VERSION = Get-Content $CI_PROJECT_DIR\version.txt
    - $CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()
    - echo "CI_BUILD_VERSION $CI_BUILD_VERSION"
    - echo "pubNugetDir $pubNugetDir"
    - echo "pubRelDir $pubRelDir"
    - New-Item -ItemType Directory -Force -Path $pubNugetDir
    - '& $CI_PROJECT_DIR\cm\Nuget\GeneratePackage.bat $CI_BUILD_VERSION-$CI_COMMIT_BRANCH $pubRelDir $pubNugetDir\interface.nuspec'
    - '& $NugetExe pack $pubNugetDir\interface.nuspec -OutputDirectory $pubNugetDir'

nuget-release-packages:
  stage: package
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo "Creating Release Packages"
    - $CI_BUILD_VERSION = Get-Content $CI_PROJECT_DIR\version.txt
    - $CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()
    - echo "CI_BUILD_VERSION $CI_BUILD_VERSION"
    - echo "pubNugetDir $pubNugetDir"
    - echo "pubRelDir $pubRelDir"
    - New-Item -ItemType Directory -Force -Path $pubNugetDir
    - '& $CI_PROJECT_DIR\cm\Nuget\GeneratePackage.bat $CI_BUILD_VERSION $pubRelDir $pubNugetDir\interface.nuspec'
    - '& $NugetExe pack $pubNugetDir\interface.nuspec -OutputDirectory $pubNugetDir'

deploy-dev-package:      # This job runs in the deploy stage.
  stage: deploy 
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && '$DevPackageStore'
  script:
    - echo "Deploying to Dev Package Store..."
    - '& $NugetExe push $pubNugetDir\*.nupkg -Source $DevPackageStore'
    - echo "Application successfully deployed."

deploy-release-package:      # This job runs in the deploy stage.
  stage: deploy 
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && '$ReleasePackageStore'
  script:
    - echo "Deploying to Dev Package Store..."
    - '& $NugetExe push $pubNugetDir\*.nupkg -Source $ReleasePackageStore -ApiKey $RelPackageStoreToken'
    - echo "Application successfully deployed."

deploy-droplocation:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  rules:
    - if: '$DropLocationRoot'
  script:
    - '$CI_BUILD_VERSION = Get-Content "$CI_PROJECT_DIR\version.txt"'
    - '$CI_BUILD_VERSION = $CI_BUILD_VERSION.Trim()'
    - 'echo "CI_BUILD_VERSION $CI_BUILD_VERSION"'
    - '$FinalDropLocation = "{0}\{1}\{2}\{3}_{4}" -f $DropLocationRoot, $CI_PROJECT_NAME, $CI_COMMIT_BRANCH, $CI_PIPELINE_ID, $CI_BUILD_VERSION'
    - 'echo "Publish Directory $publishDir"'
    - 'echo "Deploying to $FinalDropLocation"'
    - 'robocopy /e /s "$publishDir" "$FinalDropLocation"; if ($lastexitcode -le 2) { $global:LASTEXITCODE = $null }'

    